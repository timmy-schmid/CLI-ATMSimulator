/*
 * This Java source file was generated by the Gradle 'init' task.

 * Placed testing functions for Transaction in APP class (will move later?)
 */

// package R18_G2_ASM1; //removing this gives no error when compiling????

import java.util.HashMap;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class App {
<<<<<<< HEAD
    public static void main(String[] args) {
        ATM a = new ATM("Canberra");
        a.run();
=======

    // public static final int MAX_AMOUNT = 500;
    // public static final int MIN_AMOUNT = 5;

    
    public String getGreeting() {
        return "Hello World!";
    }

    public static void testPrintCard(Card userA){
        userA.getCardDetails();
    }

    public static void testDeductMoneyFromCard(Transaction withdrawal){
        withdrawal.deductFromCard();
    }

    //just printing out ALL enum vals
    public static void testMoneyType(){
        for (MoneyType type: MoneyType.values()) {
            System.out.println("type = "+type + ", value = " + type.getValue() +" , amount = " + type.getAmount());
        }
    }

    // public static void testExactWithdrawalAmount(Transaction withdrawal){
    //     //first time withdrawing money from ATM (Full originally)
    //    boolean result =  withdrawal.exactWithdrawalAmountCheck();
    // //    assert(MoneyType.HUNDRED_DOLLARS.getAmount() == 49); //decreased by 1
    // }

    //prints output after splitting up deductAmount into different money/coin components 
    public static void testCashRemainder(Transaction withdrawal){
        withdrawal.findRemainder(); //withdrawal.getDeductAmount());
        withdrawal.printRemainderStorageMap();
    }


    //1 user using ATM machine
    public static void testDeductFromATM(Transaction withdrawal){
        withdrawal.findRemainder();
        withdrawal.compareReqWithMoneyTypeAmount(withdrawal.getRemainderStorageMap());
    }

    
    //3 users using ATM machine (A, B, C)
    public static void multipleTestDeductFromATM(Transaction withdrawalA, Transaction withdrawalB, Transaction withdrawalC){
       
        withdrawalA.findRemainder();
        withdrawalA.compareReqWithMoneyTypeAmount(withdrawalA.getRemainderStorageMap()); //deduct from ATM
        withdrawalA.deductFromCard();
        
        withdrawalB.findRemainder();
        withdrawalB.compareReqWithMoneyTypeAmount(withdrawalB.getRemainderStorageMap());
        withdrawalB.deductFromCard();

        withdrawalC.findRemainder();
        withdrawalC.compareReqWithMoneyTypeAmount(withdrawalC.getRemainderStorageMap()); //deduct from ATM
        withdrawalC.deductFromCard();
    }

    public static void main(String[] args) {
        ATM1 atm1 = new ATM1();

        List<Card> cardsListA = new ArrayList<>();
        List<Card> cardsListB = new ArrayList<>();
        List<Card> cardsListC = new ArrayList<>();

        // Card userA = new Card("BOB", 111,1000, "15/08/2019", "20/08/2022");
        // cardsListA.add(userA);
        // Account userAAccount = new Account(userA.getID(), cardsListA);

        // Card userB = new Card("DYLAN", 121,1000, "25/08/2020", "15/10/2022");
        // cardsListB.add(userB);
        // Account userBAccount = new Account(userB.getID(), cardsListB);

        // Card userC = new Card("MILLY", 131,1000, "01/04/2020", "25/12/2021");
        // cardsListC.add(userC);
        // Account userCAccount = new Account(userC.getID(), cardsListC);


        // Date date = new Date();
        // double deductAmountAB = 59.50;
        // double deductAmountC = 120.00;

        // //where transactionID = userID? 
        // Transaction withdrawalA = new T_Withdrawal(atm1, TransactionType.WITHDRAWAL, userAAccount, deductAmountAB, date, userA.getID());

        // Transaction withdrawalB = new T_Withdrawal(atm1, TransactionType.WITHDRAWAL, userBAccount, deductAmountAB, date, userB.getID());

        // Transaction withdrawalC = new T_Withdrawal(atm1, TransactionType.WITHDRAWAL, userCAccount, deductAmountC, date, userC.getID());

        // // testCashRemainder(withdrawal);
        // // testDeductFromATM(withdrawal);
        // multipleTestDeductFromATM(withdrawalA, withdrawalB, withdrawalC);
        // testMoneyType();

        // System.out.println("\n\n");
        // testPrintCard(userA);

        // testPrintCard(userB);
        // testPrintCard(userC);
>>>>>>> master
    }
}
